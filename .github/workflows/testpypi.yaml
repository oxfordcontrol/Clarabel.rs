name: testpypi

on:
  workflow_dispatch:

env:
  PACKAGE_NAME: clarabel
  PYTHON_VERSION: "3.9" # to build abi3 wheels
  PYPI_TARGET: testpypi # use "testpypi" for testing, "pypi" otherwise

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }} for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds (intel runner)
          - os: ubuntu-latest
            target: x86_64
            features: "python,pardiso"
            test: true

          - os: ubuntu-latest
            target: aarch64
            features: "python,pardiso-panua"
            test: false
            
          # macOS Intel build
          - os: macos-13
            target: x86_64
            features: "python,pardiso"
            test: true
            
          # macOS ARM build
          - os: macos-latest
            target: aarch64
            features: "python,pardiso-panua"
            test: true
            
          # Windows build
          - os: windows-latest
            target: x64
            features: "python,pardiso"
            test: true

          - os: windows-11-arm
            target: arm64
            features: "python,pardiso-panua"
            test: true

    steps:

      - uses: actions/checkout@v4
      - name: Generate Cargo.lock
        run: cargo generate-lockfile
        
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ matrix.os == 'windows' && matrix.target || '' }}
                    
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          command: build
          manylinux: ${{ matrix.os == 'ubuntu-latest' && 'auto' || '' }}
          args: -v --release --out dist -i python${{ env.PYTHON_VERSION }} --features "${{ matrix.features }}"
          
      - name: Install and test built wheel
        if: matrix.test
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install dist/${{ env.PACKAGE_NAME }}-*.whl --force-reinstall
          python -c "import clarabel"
          python examples/python/example_qp.py 
          python examples/python/example_sdp.py 
          
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          manylinux: auto
          args: --out dist 

      - name: Test sdist
        run: |
          pip install --force-reinstall --verbose dist/*.tar.gz
          python -c 'import clarabel'
          
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist


  release:
    name: Release
    runs-on: ubuntu-latest
    needs: 
      - build-wheels
      - sdist
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Publish to Test PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing --repository ${{ env.PYPI_TARGET  }} dist/*
